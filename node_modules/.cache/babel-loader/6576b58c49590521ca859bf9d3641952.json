{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Admin\\\\ReactJS\\\\temp\\\\temp-refactor-no-module\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\ReactJS\\\\temp\\\\temp-refactor-no-module\\\\src\\\\components\\\\QuestionForm.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport firebase from \"firebase\";\nimport { Form, Radio, Input, Button, Icon } from \"antd\";\nimport logo from \"../utils/logo.jpg\";\nimport { firebaseConfig } from \"../utils/configFirebase\";\nimport { createNotification } from \"./Common/Notification\";\nfirebase.initializeApp(firebaseConfig);\nconst dataQuestion = firebase.database();\n\nconst toTitleCase = str => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nconst writeQuestionToFirebase = (submitData, language) => {\n  var setName = toTitleCase(submitData.fullname);\n  var setStudentID = submitData.studentID.toUpperCase();\n  var setQuestion = submitData.question;\n  var setMajor = submitData.major;\n  var setDate = new Date();\n  var date = String(setDate.getDate()).padStart(2, \"0\");\n  var mon = String(setDate.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n\n  var year = setDate.getFullYear();\n  var hours = String(setDate.getHours()).padStart(2, \"0\");\n  var min = String(setDate.getMinutes()).padStart(2, \"0\");\n  setDate = hours + \":\" + min + \" - \" + date + \"/\" + mon + \"/\" + year;\n  var ref = dataQuestion.ref(\"k15-questions\");\n  var userRef = ref.child(setStudentID);\n  var cUserRef = ref.child(\"countUser\");\n  var cQuesRef = ref.child(\"countQuestion\");\n  userRef.once(\"value\", data => {\n    var curUserRef = ref.child(setStudentID);\n\n    if (data.val() != null) {\n      var totalTimes = data.val().totalTimes + 1;\n      curUserRef.update({\n        timeUpdate: setDate,\n        totalTimes: totalTimes\n      });\n      var newQuestion = {};\n      newQuestion[totalTimes] = setQuestion;\n      curUserRef.child(\"question\").update(newQuestion);\n      createNotification(language.notiUpdate, 0);\n    } else {\n      curUserRef.set({\n        id: setStudentID,\n        name: setName,\n        major: setMajor,\n        question: {\n          1: setQuestion\n        },\n        timeCreate: setDate,\n        timeUpdate: setDate,\n        totalTimes: 1\n      });\n      createNotification(language.notiCreate, 0);\n      cUserRef.once(\"value\", data => {\n        var count = data.val() + 1;\n        ref.update({\n          countUser: count\n        });\n      });\n    }\n\n    cQuesRef.once(\"value\", data => {\n      var count = data.val() + 1;\n      ref.update({\n        countQuestion: count\n      });\n    });\n  });\n};\n\nconst TextArea = Input.TextArea;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nfunction QuestionForm(props) {\n  const _useState = useState(props.language),\n        _useState2 = _slicedToArray(_useState, 2),\n        language = _useState2[0],\n        setLanguage = _useState2[1];\n\n  const isError = useRef(false);\n  const isFirstRun = useRef(true);\n  const isFirstSubmit = useRef(true);\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    } else {\n      setLanguage(language => props.language);\n    }\n  });\n  useEffect(() => {\n    if (isFirstSubmit.current) {\n      isFirstSubmit.current = false;\n      return;\n    } else {\n      isError.current = false;\n      document.getElementsByTagName(\"button\")[0].click();\n    }\n  }, [isError.current && language]);\n  const getFieldDecorator = props.form.getFieldDecorator;\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    props.form.validateFields({\n      force: true\n    }, (err, values) => {\n      if (!err) {\n        writeQuestionToFirebase(values, language);\n      } else {\n        isError.current = true;\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"Form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Form, Object.assign({}, formItemLayout, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    alt: \"logo-fcode\",\n    className: \"logo\",\n    src: logo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"titleText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, language.titleForm), React.createElement(\"ul\", {\n    className: \"formNotes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, language.titleNote, language.noteList.map(note => {\n    return React.createElement(\"li\", {\n      key: note.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), \" \", note.content, \" \");\n  })))), React.createElement(Form.Item, {\n    label: language.formList[0].label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, getFieldDecorator(\"fullname\", {\n    rules: [{\n      required: true,\n      message: language.formList[0].errMessage[0]\n    }, {\n      pattern: \"[A-Za-z]\",\n      message: language.formList[0].errMessage[1]\n    }]\n  })(React.createElement(Input, {\n    size: \"large\",\n    placeholder: language.formList[0].placeholder,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    label: language.formList[1].label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, getFieldDecorator(\"studentID\", {\n    rules: [{\n      required: true,\n      message: language.formList[1].errMessage[0]\n    }, {\n      max: 8,\n      pattern: \"[A-Za-z]{2}(0[1-9]|1[0-5])[0-1]{1}[0-9]{3}\",\n      message: language.formList[1].errMessage[1]\n    }]\n  })(React.createElement(Input, {\n    size: \"large\",\n    placeholder: language.formList[1].placeholder,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    label: language.formList[2].label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, getFieldDecorator(\"question\", {\n    rules: [{\n      required: true,\n      message: language.formList[2].errMessage\n    }]\n  })(React.createElement(TextArea, {\n    rows: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    label: language.formList[3].label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, getFieldDecorator(\"major\", {\n    rules: [{\n      required: true,\n      message: language.formList[3].errMessage\n    }],\n    initialValue: \"SE\"\n  })(React.createElement(Radio.Group, {\n    buttonStyle: \"outline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(Radio.Button, {\n    value: \"SE\",\n    defaultChecked: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"SE\"), React.createElement(Radio.Button, {\n    value: \"IA\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"IA\"), React.createElement(Radio.Button, {\n    value: \"IoT\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, \"IoT\"), React.createElement(Radio.Button, {\n    value: \"AI\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, \"AI\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, language.submitBtn))));\n}\n\nexport default Form.create()(QuestionForm);","map":{"version":3,"sources":["C:\\Users\\Admin\\ReactJS\\temp\\temp-refactor-no-module\\src\\components\\QuestionForm.js"],"names":["React","useState","useRef","useEffect","firebase","Form","Radio","Input","Button","Icon","logo","firebaseConfig","createNotification","initializeApp","dataQuestion","database","toTitleCase","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","writeQuestionToFirebase","submitData","language","setName","fullname","setStudentID","studentID","setQuestion","question","setMajor","major","setDate","Date","date","String","getDate","padStart","mon","getMonth","year","getFullYear","hours","getHours","min","getMinutes","ref","userRef","child","cUserRef","cQuesRef","once","data","curUserRef","val","totalTimes","update","timeUpdate","newQuestion","notiUpdate","set","id","name","timeCreate","notiCreate","count","countUser","countQuestion","TextArea","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","QuestionForm","props","setLanguage","isError","isFirstRun","isFirstSubmit","current","document","getElementsByTagName","click","getFieldDecorator","form","handleSubmit","event","preventDefault","validateFields","force","err","values","titleForm","titleNote","noteList","map","note","content","formList","label","rules","required","message","errMessage","pattern","placeholder","max","initialValue","submitBtn","create"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport { Form, Radio, Input, Button, Icon } from \"antd\";\r\nimport logo from \"../utils/logo.jpg\";\r\nimport { firebaseConfig } from \"../utils/configFirebase\";\r\nimport { createNotification } from \"./Common/Notification\";\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nconst dataQuestion = firebase.database();\r\n\r\nconst toTitleCase = (str) => {\r\n  return str.replace(/\\w\\S*/g, function (txt) {\r\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n  });\r\n}\r\n\r\nconst writeQuestionToFirebase = (submitData, language) => {\r\n  var setName = toTitleCase(submitData.fullname);\r\n  var setStudentID = submitData.studentID.toUpperCase();\r\n  var setQuestion = submitData.question;\r\n  var setMajor = submitData.major;\r\n  var setDate = new Date();\r\n  var date = String(setDate.getDate()).padStart(2, \"0\");\r\n  var mon = String(setDate.getMonth() + 1).padStart(2, \"0\"); //January is 0!\r\n  var year = setDate.getFullYear();\r\n  var hours = String(setDate.getHours()).padStart(2, \"0\");\r\n  var min = String(setDate.getMinutes()).padStart(2, \"0\");\r\n  setDate = hours + \":\" + min + \" - \" + date + \"/\" + mon + \"/\" + year;\r\n  var ref = dataQuestion.ref(\"k15-questions\");\r\n  var userRef = ref.child(setStudentID);\r\n  var cUserRef = ref.child(\"countUser\");\r\n  var cQuesRef = ref.child(\"countQuestion\");\r\n  userRef.once(\"value\", data => {\r\n    var curUserRef = ref.child(setStudentID);\r\n    if (data.val() != null) {\r\n      var totalTimes = data.val().totalTimes + 1;\r\n      curUserRef.update({\r\n        timeUpdate: setDate,\r\n        totalTimes: totalTimes\r\n      });\r\n      var newQuestion = {};\r\n      newQuestion[totalTimes] = setQuestion;\r\n      curUserRef.child(\"question\").update(newQuestion);\r\n      createNotification(language.notiUpdate, 0);\r\n    } else {\r\n      curUserRef.set({\r\n        id: setStudentID,\r\n        name: setName,\r\n        major: setMajor,\r\n        question: { 1: setQuestion },\r\n        timeCreate: setDate,\r\n        timeUpdate: setDate,\r\n        totalTimes: 1\r\n      });\r\n      createNotification(language.notiCreate, 0);\r\n      cUserRef.once(\"value\", data => {\r\n        var count = data.val() + 1;\r\n        ref.update({\r\n          countUser: count\r\n        });\r\n      });\r\n    }\r\n    cQuesRef.once(\"value\", data => {\r\n      var count = data.val() + 1;\r\n      ref.update({\r\n        countQuestion: count\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nconst { TextArea } = Input;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 8 }\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 }\r\n  }\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8\r\n    }\r\n  }\r\n};\r\n\r\nfunction QuestionForm(props) {\r\n    const [language, setLanguage] = useState(props.language);\r\n    const isError = useRef(false);\r\n    const isFirstRun = useRef(true);\r\n    const isFirstSubmit = useRef(true);\r\n    useEffect(() => {\r\n      if (isFirstRun.current) {\r\n        isFirstRun.current = false;\r\n        return;\r\n      }\r\n      else {\r\n        setLanguage(language => props.language);\r\n      }\r\n    });\r\n    useEffect(() => {\r\n      if (isFirstSubmit.current) {\r\n        isFirstSubmit.current = false;\r\n        return;\r\n      }\r\n      else {\r\n        isError.current = false;\r\n        document.getElementsByTagName(\"button\")[0].click();\r\n      }\r\n    }, [isError.current && language]);\r\n\r\n    const { getFieldDecorator } = props.form;\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      props.form.validateFields({ force: true }, (err, values) => {\r\n        if (!err) {\r\n          writeQuestionToFirebase(values, language);\r\n        }\r\n        else {\r\n          isError.current = true;\r\n        }\r\n      });\r\n    };\r\n    return (\r\n      <div className=\"Form\">\r\n        <Form {...formItemLayout} onSubmit={handleSubmit}>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <img alt=\"logo-fcode\" className=\"logo\" src={logo} />\r\n            <div className=\"titleText\">\r\n              <h1>{language.titleForm}</h1>\r\n              <ul className=\"formNotes\">\r\n                {language.titleNote}\r\n                {language.noteList.map(note => {\r\n                  return (\r\n                    <li key={note.id}>\r\n                    <Icon type=\"check\" /> {note.content}{\" \"}\r\n                  </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          </Form.Item>\r\n          <Form.Item label={language.formList[0].label}>\r\n            {getFieldDecorator(\"fullname\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: language.formList[0].errMessage[0]\r\n                },\r\n                {\r\n                  pattern: \"[A-Za-z]\",\r\n                  message: language.formList[0].errMessage[1]\r\n                }\r\n              ]\r\n            })(\r\n              <Input\r\n                size=\"large\"\r\n                placeholder={language.formList[0].placeholder}\r\n                autoComplete=\"off\"\r\n              />\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item label={language.formList[1].label}>\r\n            {getFieldDecorator(\"studentID\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: language.formList[1].errMessage[0]\r\n                },\r\n                {\r\n                  max: 8,\r\n                  pattern: \"[A-Za-z]{2}(0[1-9]|1[0-5])[0-1]{1}[0-9]{3}\",\r\n                  message: language.formList[1].errMessage[1]\r\n                }\r\n              ]\r\n            })(\r\n              <Input\r\n                size=\"large\"\r\n                placeholder={language.formList[1].placeholder}\r\n                autoComplete=\"off\"\r\n              />\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item label={language.formList[2].label}>\r\n            {getFieldDecorator(\"question\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: language.formList[2].errMessage\r\n                }\r\n              ]\r\n            })(<TextArea rows={4} />)}\r\n          </Form.Item>\r\n          <Form.Item label={language.formList[3].label}>\r\n            {getFieldDecorator(\"major\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: language.formList[3].errMessage\r\n                }\r\n              ],\r\n              initialValue: \"SE\"\r\n            })(\r\n              <Radio.Group buttonStyle=\"outline\">\r\n                <Radio.Button value=\"SE\" defaultChecked>\r\n                  SE\r\n                </Radio.Button>\r\n                <Radio.Button value=\"IA\">IA</Radio.Button>\r\n                <Radio.Button value=\"IoT\">IoT</Radio.Button>\r\n                <Radio.Button value=\"AI\">AI</Radio.Button>\r\n              </Radio.Group>\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {language.submitBtn}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Form.create()(QuestionForm);\r\n"]},"metadata":{},"sourceType":"module"}